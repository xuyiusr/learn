/**
 *通过修改PORT来构建多个会话的报文
 */
#include <pcap.h>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/if_ether.h>
#include <signal.h>
#include <arpa/inet.h>


unsigned short sport = 0;
unsigned short dport = 0;
#define DEFAULT_RANGE 5

struct flow_info
{
    char dev_name[256];
    pcap_t *dev;
    unsigned short child_id;
    unsigned short range;
    unsigned short sport_offset;
    unsigned int packets_ps;
    unsigned int max_packets;
    unsigned int tot_packets;
    unsigned long tot_flow;
    struct timeval first_tv;
    unsigned long interval;
    int req_len ;
    int rsp_len ;
    u_char req_packet[65535];
    u_char rsp_packet[65535];
};

volatile sig_atomic_t g_signal_int = 0;

int packet_send(struct flow_info *info);
long get_u_time();

void packet_send_loop(struct flow_info *info, unsigned char *packet, int p_len, int tflag)
{
    int i;
    unsigned short *pport;
    unsigned int utime = 0;
    utime = 1000000 / info->packets_ps;

    for(i = 0; i < info->range; ++i)
    {
        if(tflag == 0) //is req packet
        {
            pport = (unsigned short *)(packet + 34);
        }
        else
        {
            pport = (unsigned short *)(packet + 36);
        }
        *pport += i;
        if(0 != pcap_sendpacket(info->dev, packet, p_len))
        {
            printf("%s\n", pcap_geterr(info->dev));
        }
        info->tot_packets++;
        info->tot_flow += p_len;
        usleep(utime);
    }


}

void getPacket(u_char *arg, const struct pcap_pkthdr *pkthdr, const u_char *packet)
{
    struct flow_info *info = (struct flow_info *)arg;
    int flag;
    //printf("id: %d\n", ++(*id));
    //printf("Packet length: %d\n", pkthdr->len);
    //printf("Number of bytes: %d\n", pkthdr->caplen);
    //printf("Recieved time: %s", ctime((const time_t *)&pkthdr->ts.tv_sec));
    if(packet == NULL)
    {
        return;
    }
    struct iphdr *iph = (struct iphdr *)(packet + sizeof(struct ethhdr));
    struct tcphdr *tcph = (struct tcphdr *)((char *)iph + iph->ihl * 4);
    if(sport == 0 && dport == 0)
    {
        sport = tcph->source;
        dport = tcph->dest;
    }
    if(sport == tcph->source && dport == tcph->dest)
    {
        flag = 0; //request
    }
    else
    {
        flag = 1; //response
    }
    char *data = (char *)tcph + tcph->doff * 4;
    int datalen = pkthdr->len - sizeof(struct ethhdr) - iph->ihl * 4 - tcph->doff * 4;
    if(datalen > 0)
    {
        packet_send_loop(info, (unsigned char *)packet, pkthdr->len, flag);
    }

}

void sig_int()
{
    g_signal_int = 1;
}

long get_u_time()
{
    struct timeval cur_tv;
    gettimeofday(&(cur_tv), NULL);
    return (int64_t)cur_tv.tv_sec * 1000000 + cur_tv.tv_usec;
}

int packet_send(struct flow_info *info)
{
    int i;
    unsigned short *pport;
    unsigned short rol_port;
    unsigned short sen_port;
    long sleep_time;
    long start = 0;
    long end = 0;

    //printf("info->range:%u info->sport_offset:%u \n",info->range,info->sport_offset);

    for(i = 0; i < info->range; ++i)
    {
        start = get_u_time();
        pport = (unsigned short *)(info->req_packet + 34);
        rol_port = *pport;
        sen_port = ntohs(*pport)+ i + info->sport_offset;
        //printf("1 rol_port:%u sen_port%u\n",ntohs(rol_port),sen_port);
        *pport = htons(sen_port);
        if(0 != pcap_sendpacket(info->dev, info->req_packet, info->req_len))
        {
            printf("pcap_sendpacket %s\n", pcap_geterr(info->dev));
        }
        *pport = rol_port;
        info->tot_packets++;
        info->tot_flow += info->req_len;

        pport = (unsigned short *)(info->rsp_packet + 36);
        rol_port = *pport;
        sen_port = ntohs(*pport)+ i + info->sport_offset;
       // printf("2 rol_port:%u sen_port%u\n",ntohs(rol_port),sen_port);
        *pport = htons(sen_port);
        
        if(0 != pcap_sendpacket(info->dev, info->rsp_packet, info->rsp_len))
        {
            printf("pcap_sendpacket %s\n", pcap_geterr(info->dev));
        }
        *pport = rol_port;
        info->tot_packets++;
        info->tot_flow += info->rsp_len;
        end = get_u_time();
        sleep_time = info->interval - (end - start);
        if(info->tot_packets == 2)
        {
            printf("%ld, %u, %ld, %ld\n", sleep_time, info->interval, end, start);
        }

    #if 1      
        if(sleep_time > 0)
        {
            usleep(sleep_time);
        }
        else
        {
            usleep(1);
        }
    #endif
    }
}


int child_pthread_func(struct flow_info* info)
{
    char errBuf[PCAP_ERRBUF_SIZE];
    struct flow_info* my_info;
    int opt;
    int range = 0;
    int packets_ps = 0;
    int max_packets = 0;
    int phread_num = 0;
    struct pcap_pkthdr hdr;

    
    if(info == NULL)
    {   
        return 0;
    }
    my_info = malloc(sizeof(struct flow_info));
    memset(my_info, 0, sizeof(struct flow_info));
    memcpy(my_info, info, sizeof(struct flow_info));

    my_info->dev = pcap_open_live(my_info->dev_name, 65535, 1, 0, errBuf);
    
   
    if ( !my_info->dev)
    {
        printf("error: pcap_open(): %s\n", errBuf);
        exit(1);
    }
    signal(SIGINT, sig_int);

    /* wait loop forever */

    gettimeofday(&(my_info->first_tv), NULL);
    printf("info %u %u %u \n",my_info->child_id,my_info->sport_offset,my_info->range);
    //send
    sleep(1);
    int n = 0;
    if(0 < my_info->max_packets)
    {
        while(n++ < (my_info->max_packets ))
        {
            packet_send(my_info);
        }
    }
    else
    {
        while(!g_signal_int)
        {
            packet_send(my_info);
        }
    }


    struct timeval cur_tv;
    gettimeofday(&(cur_tv), NULL);

    unsigned long us = ((int64_t)cur_tv.tv_sec * 1000000 + cur_tv.tv_usec) - ((int64_t)my_info->first_tv.tv_sec * 1000000 + my_info->first_tv.tv_usec);
    printf("child_id:%u total:%u p, %u byte, us:%u\n", my_info->child_id, my_info->tot_packets, my_info->tot_flow, us);
    printf("child_id:%u flow_rate:%.0f p/s  %.3f m/s\n", my_info->child_id,(double)(my_info->tot_packets) / ((double)us / 1000000), (double)my_info->tot_flow / (double)us);

    pcap_close(my_info->dev);

    return 0;

}


int main(int argc, char **argv)
{
    char errBuf[PCAP_ERRBUF_SIZE];
    pcap_t *packet_fp = NULL;
    struct flow_info* info;
    int opt;
    int range = 0;
    int per_range = 0;
    int packets_ps = 0;
    int max_packets = 0;
    int phread_num = 0;
    struct pcap_pkthdr hdr;
    const u_char *packet = NULL;


    info = malloc(sizeof(struct flow_info));
    memset(info, 0, sizeof(struct flow_info));
    /* get opt parm */
    //printf("optind:%d，opterr：%d\n", optind, opterr);
    while((opt = getopt(argc, argv, "f:d:s:p:m:hx:")) != -1)
    {
        //printf("optind: %d\n", optind);
        switch (opt)
        {
        case 'f':
            //printf("The argument of -f is %s\n", optarg);
            if (strlen(optarg) == 0)
            {
                return;
            }
            packet_fp = pcap_open_offline(optarg, errBuf);
            break;
        case 'd':
            //printf("The argument of -d is %s\n", optarg);
            if (strlen(optarg) == 0)
            {
                return;
            }
            strcpy(info->dev_name, optarg);
            break;
        case 's':
            //printf("The argument of -r is %s\n", optarg);
            range = atoi(optarg);
            if(range == 0)
            {
                range = DEFAULT_RANGE;
            }
            break;
        case 'p':
            //printf("The argument of -p is %s\n", optarg);
            packets_ps = atoi(optarg);
            if(0 >= packets_ps)
            {
                exit(-1);
            }
            break;
        case 'm':
            //printf("The argument of -m is %s\n", optarg);
            max_packets = atoi(optarg);
            if(0 > max_packets)
            {
                exit(-1);
            }
            break;
        case 'h':
            printf("说明:\t-f filename\t指定发包源文件\n\t-d ethname\t指定转发端口名\n\t-s sessions\t设置会话数\n\t-p packets/s\t设置发包速度\n\t-m max_send_packets\t设置最大发包数(0表示一直发)\n\t-x pthreadnum\t发包进程数(解决发包慢的问题))\n\t-h\t使用帮助\n");
            return 0;
        case 'x':
        //printf("The argument of -m is %s\n", optarg);
        phread_num = atoi(optarg);
        if(0 >= phread_num)
        {
            exit(-1);
        }
        break;
        case '?':
            printf("Unknown option:%c\n", (char)optopt);
            return 0;

        }
    }
    signal(SIGINT, sig_int);
    /*防止会话数设置错误*/
    if (phread_num > range)
    {
        range = phread_num;
    }

    if (!packet_fp)
    {
        printf("error: pcap_open(): %s\n", errBuf);
        exit(1);
    }

    signal(SIGINT, sig_int);

    //init info
    
    info->packets_ps = packets_ps;
    info->max_packets = max_packets;
    info->interval = 1000000 / info->packets_ps;

    //get packet from pcap file
    packet = pcap_next(packet_fp, &hdr);
    info->req_len = hdr.len;
    memset(info->req_packet, 0x00, sizeof(info->req_packet));
    memcpy(info->req_packet, packet, info->req_len);

    packet = pcap_next(packet_fp, &hdr);
    info->rsp_len = hdr.len;
    memset(info->rsp_packet, 0x00, sizeof(info->rsp_packet));
    memcpy(info->rsp_packet, packet, info->rsp_len);

    int i ;
    for (i = 0; i < phread_num; i++)
    {
        info->child_id = i;
        if(i == phread_num - 1)
        {
            info->range = range - (i * (range / phread_num));
        
        }
        else
        {
            info->range = range / phread_num;
        
        }
        info->sport_offset = i * (range / phread_num);

        if (fork() == 0)
        {   
            child_pthread_func(info);
            return 0;
        }
    }
    printf("init child process success\n");

    
    while (!g_signal_int)
    {
        
    }

    free(info);
    pcap_close(packet_fp);
    return 0;
}
