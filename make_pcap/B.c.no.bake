/**
 *通过修改IP来构建多个会话的报文
 */
#include <pcap.h>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/if_ether.h>
#include <signal.h>

unsigned short sport = 0;
unsigned short dport = 0;
#define DEFAULT_RANGE 5

struct flow_info
{
    pcap_t *dev;
    unsigned short range;
    unsigned int packets_ps;
    unsigned int max_packets;
    unsigned int tot_packets;
    unsigned long tot_flow;
    struct timeval first_tv;
    unsigned long interval;

};

u_char req_packet[65535];
int req_len = 0;
u_char rsp_packet[65535];
int rsp_len = 0;
volatile sig_atomic_t g_signal_int = 0;

int packet_send(struct flow_info *info);
long get_u_time();

void packet_send_loop(struct flow_info *info, unsigned char *packet, int p_len, int tflag)
{
    int i;
    unsigned short *pport;
    unsigned int utime = 0;
    utime = 1000000 / info->packets_ps;

    for(i = 0; i < info->range; ++i)
    {
        if(tflag == 0) //is req packet
        {
            pport = (unsigned short *)(packet + 34);
        }
        else
        {
            pport = (unsigned short *)(packet + 36);
        }
        *pport += i;
        if(0 != pcap_sendpacket(info->dev, packet, p_len))
        {
            printf("%s\n", pcap_geterr(info->dev));
        }
        info->tot_packets++;
        info->tot_flow += p_len;
        usleep(utime);
    }


}

void getPacket(u_char *arg, const struct pcap_pkthdr *pkthdr, const u_char *packet)
{
    struct flow_info *info = (struct flow_info *)arg;
    int flag;
    //printf("id: %d\n", ++(*id));
    //printf("Packet length: %d\n", pkthdr->len);
    //printf("Number of bytes: %d\n", pkthdr->caplen);
    //printf("Recieved time: %s", ctime((const time_t *)&pkthdr->ts.tv_sec));
    if(packet == NULL)
    {
        return;
    }
    struct iphdr *iph = (struct iphdr *)(packet + sizeof(struct ethhdr));
    struct tcphdr *tcph = (struct tcphdr *)((char *)iph + iph->ihl * 4);
    if(sport == 0 && dport == 0)
    {
        sport = tcph->source;
        dport = tcph->dest;
    }
    if(sport == tcph->source && dport == tcph->dest)
    {
        flag = 0; //request
    }
    else
    {
        flag = 1; //response
    }
    char *data = (char *)tcph + tcph->doff * 4;
    int datalen = pkthdr->len - sizeof(struct ethhdr) - iph->ihl * 4 - tcph->doff * 4;
    if(datalen > 0)
    {
        packet_send_loop(info, (unsigned char *)packet, pkthdr->len, flag);
    }

}

void sig_int()
{
    g_signal_int = 1;
}

int main(int argc, char **argv)
{
    char errBuf[PCAP_ERRBUF_SIZE];
    pcap_t *packet_fp = NULL;
    pcap_t *device = NULL;
    struct flow_info info;
    int opt;
    int range = 0;
    int packets_ps = 0;
    int max_packets = 0;
    struct pcap_pkthdr hdr;
    const u_char *packet = NULL;

    /* get opt parm */
    //printf("optind:%d，opterr：%d\n", optind, opterr);
    while((opt = getopt(argc, argv, "f:d:r:p:t:hx:")) != -1)
    {
        //printf("optind: %d\n", optind);
        switch (opt)
        {
        case 'f':
            //printf("The argument of -f is %s\n", optarg);
            packet_fp = pcap_open_offline(optarg, errBuf);
            break;
        case 'd':
            //printf("The argument of -d is %s\n", optarg);
            device = pcap_open_live(optarg, 65535, 1, 0, errBuf);
            break;
        case 'r':
            //printf("The argument of -r is %s\n", optarg);
            range = atoi(optarg);
            if(range == 0)
            {
                range = DEFAULT_RANGE;
            }
            break;
        case 'p':
            //printf("The argument of -p is %s\n", optarg);
            packets_ps = atoi(optarg);
            if(0 > packets_ps)
            {
                exit(-1);
            }
            break;
        case 't':
            //printf("The argument of -p is %s\n", optarg);
            max_packets = atoi(optarg);
            if(0 > max_packets)
            {
                exit(-1);
            }
            break;
        case 'h':
            printf("说明:\n\
            -f filename             指定发包源文件\n\
            -d devname              指定转发端口名\n\
            -r sessions             设置会话数\n\
            -p packets/s            设置发包速度\n\
            -t max_send_packets     设置最大发包数\n");
            return 0;
        case '?':
            printf("Unknown option:%c\n", (char)optopt);
            return 0;
        }
    }

    signal(SIGINT, sig_int);

    if(!packet_fp)
    {
        printf("error: pcap_open(): %s\n", errBuf);
        exit(1);
    }

    /* construct a filter */
#if 0
    struct bpf_program filter;
    pcap_compile(device, &filter, "port 0", 1, 0);
    pcap_setfilter(device, &filter);
#endif
    /* wait loop forever */

    //init info
    memset(&info, 0, sizeof(info));
    info.dev = device;
    info.range = range;
    info.packets_ps = packets_ps;
    info.max_packets = max_packets;

    //get packet from pcap file
    packet = pcap_next(packet_fp, &hdr);
    req_len = hdr.len;
    memset(req_packet, 0x00, sizeof(req_packet));
    memcpy(req_packet, packet, req_len);

    packet = pcap_next(packet_fp, &hdr);
    rsp_len = hdr.len;
    memset(rsp_packet, 0x00, sizeof(rsp_packet));
    memcpy(rsp_packet, packet, rsp_len);

    gettimeofday(&(info.first_tv), NULL);

    //send
    int n = 0;
    if(0 != info.packets_ps)
    {
        info.interval = 1000000 / info.packets_ps;

        if(0 < info.max_packets)
        {
            while(n++ < (info.max_packets / 2 / info.range))
            {
                packet_send(&info);
            }
            packet_send(&info);
        }
        else
        {
            while(!g_signal_int)
            {
                packet_send(&info);
            }
        }
    }
    else
    {
        if(0 < info.max_packets)
        {
            while(n++ < (info.max_packets / 2 / info.range))
            {
                packet_send_fast(&info);
            }
            packet_send_fast(&info);
        }
        else
        {
            while(!g_signal_int)
            {
                packet_send_fast(&info);
            }
        }
    }
    //pcap_loop(device, -1, getPacket, (u_char *)&info);

    struct timeval cur_tv;
    gettimeofday(&(cur_tv), NULL);

    unsigned long us = ((int64_t)cur_tv.tv_sec * 1000000 + cur_tv.tv_usec) - ((int64_t)info.first_tv.tv_sec * 1000000 + info.first_tv.tv_usec);
    printf("total:%u p, %u byte, us:%u\n", info.tot_packets, info.tot_flow, us);
    printf("flow_rate:%.0f p/s  %.3f m/s\n", (double)(info.tot_packets) / ((double)us / 1000000), (double)info.tot_flow / (double)us);

    pcap_close(packet_fp);
    pcap_close(device);

    return 0;
}

int packet_send_fast(struct flow_info *info)
{
    int i;
    unsigned short *pport;
    unsigned int *sip;

    for(i = 0; i < info->range; ++i)
    {
        if(0 < info->max_packets && info->tot_packets >= info->max_packets)
        {
            break;
        }

        pport = (unsigned short *)(req_packet + 34);
        sip = (unsigned int *)(req_packet + 26);
        //*pport += i;
        *sip += i;
        if(0 != pcap_sendpacket(info->dev, req_packet, req_len))
        {
            printf("pcap_sendpacket %s\n", pcap_geterr(info->dev));
        }
        //*pport -= i;
        *sip -= i;
        info->tot_packets++;
        info->tot_flow += req_len;

        pport = (unsigned short *)(rsp_packet + 36);
        sip = (unsigned int *)(rsp_packet + 30);
        //*pport += i;
        *sip += i;
        if(0 != pcap_sendpacket(info->dev, rsp_packet, rsp_len))
        {
            printf("pcap_sendpacket %s\n", pcap_geterr(info->dev));
        }
        //*pport -= i;
        *sip -= i;
        info->tot_packets++;
        info->tot_flow += rsp_len;
        usleep(1);
    }
}

int packet_send(struct flow_info *info)
{
    int i;
    unsigned short *pport;
    unsigned int sip;
    long sleep_time;
    long start = 0;


    for(i = 0; i < info->range; ++i)
    {
        start = get_u_time();

        if(0 < info->max_packets && info->tot_packets >= info->max_packets)
        {
            break;
        }

        sip = ntohl(*(unsigned int *)(req_packet + 26));
        sip++;
        sip = htonl(sip);
        memcpy(req_packet + 26, &sip, sizeof(unsigned int));
        if(0 != pcap_sendpacket(info->dev, req_packet, req_len))
        {
            printf("pcap_sendpacket %s\n", pcap_geterr(info->dev));
        }
        info->tot_packets++;
        info->tot_flow += req_len;

        sip = ntohl(*(unsigned int *)(rsp_packet + 30));
        sip++;
        sip = htonl(sip);
        memcpy(rsp_packet + 30, &sip, sizeof(unsigned int));
        if(0 != pcap_sendpacket(info->dev, rsp_packet, rsp_len))
        {
            printf("pcap_sendpacket %s\n", pcap_geterr(info->dev));
        }
        info->tot_packets++;
        info->tot_flow += rsp_len;

        sleep_time = info->interval - (get_u_time() - start);
        //printf("%ld, %u, %ld, %ld\n", sleep_time, info->interval, get_u_time(), start);
        usleep(sleep_time > 0 ? sleep_time : 0);
    }
}

long get_u_time()
{
    struct timeval cur_tv;
    gettimeofday(&(cur_tv), NULL);
    return(int64_t)cur_tv.tv_sec * 1000000 + cur_tv.tv_usec;
}
